import Tkinter
from Tkinter import *
from ScrolledText import *
import tkFileDialog
import tkMessageBox
import win32api
import tempfile
import win32print
import matplotlib.backends.backend_tkagg as tkagg


root = Tkinter.Tk(className= " Untitled : Zen Text Editor")

#setting the icon for the application
root.iconbitmap(r'C:\Python27\Examples\TkWindows\resources\note_icon.ico')

textPad = ScrolledText(root,width=100,height=30,fg="#ffffff")
textPad.configure(background='#6F706B')

#create a menu

#Open sub-menu handler
def open_command():
    file = tkFileDialog.askopenfile(parent=root,mode='rb',title='Select a file')
    if file != None:
        textPad.delete('1.0',END)
        contents = file.read()
        root.wm_title(file.name + " : Zen Text Editor")
        textPad.insert('1.0',contents)
        file.close()

#Save sub-menu handler
def save_command():
    file = tkFileDialog.asksaveasfile(mode='w')
    if file != None:
        #slicing off the last character from get, as an extra return is appended to the get function call
        data = textPad.get('1.0',END+'-1c')
        file.write(data)
        root.wm_title(file.name + " : Zen Text Editor")        
        file.close()

#Exit sub-menu handler
def exit_command():
    if tkMessageBox.askokcancel("Quit ","Do you really want to quit?"):
        root.destroy();

#About sub-menu handler
def about_command():
    label = tkMessageBox.showinfo("About"," Zen Text Editor\n Copyrights @ Technobotz Inc")


#New sub-menu handler
def new_command():
    data = textPad.get('1.0',END+'-1c')
    if(data != ''): #with a warning prompt
        if tkMessageBox.askokcancel("New ","Do you want to save changes?"):
            save_command()            
            textPad.delete('1.0',END)        
        else: #if user refuses to save progress
            textPad.delete('1.0',END)
    else: #without any warning
        textPad.delete('1.0',END)

#Print sub-menu handler
def print_command():
    file = tempfile.mktemp(".txt")
    open(file,"w").write(textPad.get('1.0',END+'-1c'))
    win32api.ShellExecute(
        0,
        "printto",
        file,
        '"%s"' % win32print.GetDefaultPrinter (),
        ".",
        0
    )

#Default handler , for unimplemented functionalities
def default():
    print "This command does nothing"
        
menu = Menu(root)
root.config(menu=menu)

filemenu = Menu(menu)
menu.add_cascade(label="File",menu = filemenu)
filemenu.add_command(label="New", command=new_command)
filemenu.add_command(label="Open",command=open_command)
filemenu.add_command(label="Open Recent",command=default)
filemenu.add_separator()
filemenu.add_command(label="Save",command=save_command)
filemenu.add_command(label="Save As",command=save_command)
filemenu.add_separator()
filemenu.add_command(label="Print",command=print_command)
filemenu.add_separator()
filemenu.add_command(label="Exit",command=exit_command)

findmenu = Menu(menu)
menu.add_cascade(label="Find",menu=findmenu)
findmenu.add_command(label = "Find", command = default)
findmenu.add_command(label = "Find Next", command= default)
findmenu.add_command(label = "Find Previous" , command = default)
findmenu.add_separator()
findmenu.add_command(label = "Replace", command = default)
findmenu.add_command(label = "Replace Next", command = default)

viewmenu = Menu(menu)
menu.add_cascade(label="View",menu=viewmenu)
viewmenu.add_command(label="Zoom In",command=default)
viewmenu.add_command(label="Zoom Out",command=default)
viewmenu.add_separator()
viewmenu.add_command(label="Ruler",command=default)
viewmenu.add_command(label="Layout",command=default)
viewmenu.add_separator()
viewmenu.add_command(label="Spell Check",command=default)
viewmenu.add_command(label="Dictionary",command=default)

toolmenu = Menu(menu)
menu.add_cascade(label="Tools",menu=toolmenu)
toolmenu.add_command(label="New Plugins",command=default)
toolmenu.add_command(label="New Snippet",command=default)
toolmenu.add_separator()
toolmenu.add_command(label="Manage Shortcuts",command=default)

premenu = Menu(menu)
menu.add_cascade(label="Preferences",menu=premenu)
premenu.add_command(label="User Settings",command=default)
premenu.add_command(label="Key Bindings",command=default)
premenu.add_separator()
premenu.add_command(label="Themes",command=default)

helpmenu = Menu(menu)
menu.add_cascade(label="Help",menu = helpmenu)
helpmenu.add_command(label="About",command=about_command)
#end of menu creation

textPad.pack()
root.mainloop()
